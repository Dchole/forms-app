type Query {
  currentUser: User!
  table(id: ID!): Table!
  tables(limit: Int, skip: Int, filter: TableFilterInput): TableConnection!
}

type Mutation {
  login(args: LoginInput!): Token!
  register(args: RegisterInput!): User!
  updateUser(args: UpdateInput!): User!
  createTable(args: TableInput!): Table!
  addRow(args: AddRowInput!): Row!
  editRow(args: EditRowInput!): Row!
  deleteRow(args: DeleteRowInput!): Row!
  deleteTable(id: ID!): Table!
  disableTable(id: ID!): Boolean!
}

input TableFilterInput {
  key: String!
  value: String!
}

input LoginInput {
  email: String!
  password: String!
}

input RegisterInput {
  firstName: String!
  lastName: String!
  email: String!
  password: String!
}

input UpdateInput {
  firstName: String
  lastName: String
  email: String
  password: String
}

input TableInput {
  title: String!
  limit: Int
  deadline: String
  disabled: Boolean
  fields: [FieldInput!]!
}

input AddRowInput {
  tableID: ID!
  fullName: String
  data: [String!]!
}

input EditRowInput {
  tableID: ID!
  rowID: ID!
  fullName: String
  data: [String!]!
}

input DeleteRowInput {
  tableID: ID!
  rowID: ID!
}

type Token {
  accessToken: String!
  refreshToken: String!
}

input FieldInput {
  name: String!
  type: String
}

type RegisterResult {
  _id: ID!
  fullName: String!
  email: String!
}

type User {
  fullName: String!
  email: String!
}

type Table {
  _id: ID!
  title: String!
  limit: Int
  deadline: String
  fields: [Field!]!
  rows: [Row!]!
  disabled: Boolean!
}

type Field {
  name: String!
  type: String!
}

type Row {
  fullName: String
  data: [String!]!
}

type TableConnection {
  node: [Table!]!
  hasMore: Boolean!
  cursor: ID!
}
